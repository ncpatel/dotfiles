{
	"folder_history":
	[
		"/home/nileshp/code/jarvis/demo"
	],
	"last_version": 3059,
	"last_window_id": 2,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system": "",
			"command_palette":
			{
				"height": 323.0,
				"selected_items":
				[
					[
						"Package Control: ",
						"Package Control: Install Package"
					]
				],
				"width": 435.0
			},
			"console":
			{
				"height": 161.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/nileshp/code/jarvis/demo/client.js",
				"/home/nileshp/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/nileshp/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 28.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"render",
					"region",
					"buffer"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 28.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"replace":
			{
				"height": 52.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"userGenerated",
						"userGeneratedWorker"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "// Requires\nvar Worker 	= require('webworker-threads').Worker;\nvar db 		= require(\"redis\");\nvar redis	= db.createClient();\nvar net 	= require(\"net\");\n// Database Error Logging:\nredis.on(\"error\", function (err) {\n    console.log(\"DB Error \" + err);\n});\n\nfunction Module(name, toGeneric, getWords, makesSense, userSaid, initialize, notification){\n	this.toGeneric 		= toGeneric;\n	this.getWords 		= getWords;\n	this.makesSense 	= makesSense;\n	this.userSaid 		= userSaid;\n	this.initialize 	= initialize;\n	this.notification 	= notification;\n}\n\nfunction Client(name, friendlyName, type, singleUser, capabilities, securityLevel, socket){\n	this.name 			= name;\n	this.friendlyName 	= friendlyName;\n	this.type 			= type;\n	this.singleUser 	= singleUser;\n	this.capabilities 	= capabilities;\n	this.securityLevel 	= securityLevel;\n	this.socket 		= socket;\n}\n\nfunction Message(type, message, source){\n	this.type = type;\n	this.message = message;\n}\n\nfunction userGenerated(text, source, intentional){\n	this.text = text;\n	this.intentional = intentional; // true or false\n	this.source = source;\n}\n\nfunction clientGenerated(text, source, type){\n	this.text = text;\n	this.type = type; // Update or Retrieve\n	this.source = source;\n}\n\nfunction absoluteCommand(text, source, module){\n	this.text = text;\n	this.module = module; // which module\n	this.source = source;\n}\n\nvar mockModule = new Module(\n	\"mockModule\",\n	function(toModify){ // toGeneric\n		return toModify;\n	},\n	function(){ // getWords\n		return [\n			[\"hello\", \"goodbye\"],\n			[],\n			[],\n			[]\n		]\n	},\n	function(text){ //makesSense\n		return true;\n	},\n	function(generic, original){ //userSaid\n		if(original.contains(\"hello\"))\n			return {say: \" Hello\", expectReply: \"false\"};\n		if(original.contains(\"bye\"))\n			return {say: \"Goodbye\", expectReply: \"false\"};\n	},\n	function(){ // initialize\n		return;\n	},\n	function(){ // Notifications\n		return;\n	}\n\n)\n\nvar modules = [mockModule]; // Array of all modules\n\nvar clients = []; // Array of all connected clients\n\n// State Array:\n\nvar state = {\n\n};\n\n// Notification Array (holds all notifications)\nvar notifications = [];\n\n// Notification Polling Worker\nvar notificationWorker = new Worker(function(){\n	postMessage(\"Notification Worker Initializing...\");\n	onmessage = function(event) {\n		postMessage(\"Notification Worker Exiting...\");\n		self.close();\n	};\n	setInterval(function(){\n		modules.forEach(function(element, index, self){\n			element.notification();\n		});\n	}, 2000);\n});\n\n// Client Handler\n// Should be a worker, but sockets don't work in a worker?\nvar connected = [];\nvar s = net.Server(function (socket) {\n	//socket.on('connection',function(socket){\n		console.log(\"Connection...\");\n		connected.push([socket,\"\", false]);\n	//});\n    socket.on('data', function (msg_sent) {\n    	var i;\n        for (i = 0; i < connected.length; i++) {\n            if (connected[i][0] == socket){\n                connected[i][1] += msg_sent.toString();\n                break;\n            }\n        }\n        console.log(msg_sent.toString());\n        if(connected[i][1].indexOf(\"}\") != -1){\n        	console.log(\"Full message recived\");\n        	var parseInput = JSON.parse(connected[i][1]);\n        	connected[i][1] = \"\";\n        	if(parseInput.type == \"login\"){\n        		if(parseInput.username == \"nileshp\" && parseInput.password == \"password\"){\n        			console.log(\"User succesfully logged in...awaiting connect...\");\n	        		connected[i][2] = true;\n	        	}\n	        	else\n	        		console.log(\"User login failed...\");\n        	}\n        	if(parseInput.type == \"connect\"){\n        		if(connected[i][2]){\n	        		parseInput.socket = socket;\n	        		clients.push(parseInput);\n	        		console.log(\"Client successfully connected, added to client list...\");\n	        		socket.write(\"successfully Connected\");\n	        	}else{\n	        		console.log(\"Non logged in client attempted to connect...\");\n	        	}\n        	}\n\n        	if(parseInput.type == \"userGenerated\"){\n        		console.log(\"User Generated Input...\");\n        		userGeneratedWorker.postMessage(parseInput.message);\n        	}\n        	if(parseInput.type == \"clientGenerated\"){\n        		console.log(\"Client Generated Input...\");\n        		clientGeneratedWorker.postMessage(parseInput.message);\n        	}\n        	if(parseInput.type == \"absolute\"){\n        		console.log(\"Absolute Command...\");\n        		absoluteWorker.postMessage(parseInput.message);\n        	}\n        }\n    });\n    // Use splice to get rid of the socket that is ending.\n    // The 'end' event means tcp client has disconnected.\n    socket.on('end', function () {\n    	var i;\n        for (i = 0; i < connected.length; i++){\n            if (connected[i][0] == socket)\n                break;\n        }\n        connected.splice(i, 1);\n        for( i = 0; i < clients.length; i++){\n        	if(clients.socket == socket)\n        		break;\n        }\n        clients.splice(i,1);\n    });\n});\ns.listen(8124);\nconsole.log(\"Now listening on port 8124...\");\n\nvar userGeneratedWorker = new Worker( function() {\n	onmessage = function(event){\n		// Standardize the text, by lowering the text and removing all contractions\n		event.text = event.text.toLowerCase();\n		event.text = event.text.replace(/i'm/g,\"i am\");\n		event.text = event.text.replace(/i've/g,\"i have\");\n		event.text = event.text.replace(/you'll/g,\"you will\");\n		event.text = event.text.replace(/you\\S+/g,\"you are\");\n		event.text = event.text.replace(/'ll/g,\" will\"); \n		event.text = event.text.replace(/you..?.?/g,\"you are\");\n		event.text = event.text.replace(/can't/g,\"cannot\");\n		event.text = event.text.replace(/won't/g,\"will not\");\n		event.text = event.text.replace(/n't/g,\" not\");\n		event.text = event.text.replace(/it'?s/g,\"it is\");\n		// Standardize further by choosing same sounding words e.g eye and I\n		event.text = event.text.replace(/eye/g, \"i\");\n		event.text = event.text.replace(/right/g, \"write\");\n		// Send it away for processing\n\n	}\n});\n\nvar NLP = new Worker(function() {\n\n});\n\n// Text Processing",
					"file": "/home/nileshp/code/jarvis/demo/core.js",
					"file_size": 6313,
					"file_write_time": 130492161091401124,
					"settings":
					{
						"buffer_size": 5973,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/nileshp/code/jarvis/demo/client.js",
					"settings":
					{
						"buffer_size": 1776,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"command_palette":
			{
				"height": 323.0,
				"selected_items":
				[
					[
						"Package Control: ",
						"Package Control: Install Package"
					]
				],
				"width": 435.0
			},
			"console":
			{
				"height": 161.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/nileshp/code/jarvis/demo/client.js",
				"/home/nileshp/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/nileshp/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 28.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"render",
					"region",
					"buffer"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/nileshp/code/jarvis/demo/core.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5973,
								"regions":
								{
								},
								"selection":
								[
									[
										5428,
										5428
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 3300.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/nileshp/code/jarvis/demo/client.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1776,
								"regions":
								{
								},
								"selection":
								[
									[
										487,
										487
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
								},
								"translation.x": -0.0,
								"translation.y": 60.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 28.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"position": "0,0,0,0,0,992,30,1912,1192,3840,1200",
			"project": "",
			"replace":
			{
				"height": 52.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 2,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
